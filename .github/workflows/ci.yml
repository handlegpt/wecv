name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: Code/client/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd Code/client
        npm ci
        
    - name: Run frontend linting
      run: |
        cd Code/client
        npm run lint
        
    - name: Run frontend tests
      run: |
        cd Code/client
        npm test -- --coverage --watchAll=false
        
    - name: Build frontend
      run: |
        cd Code/client
        npm run build
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: Code/client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: Code/api/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd Code/api
        npm ci
        
    - name: Run backend linting
      run: |
        cd Code/api
        npm run lint
        
    - name: Run backend tests
      run: |
        cd Code/api
        npm test -- --coverage --watchAll=false
        
    - name: Build backend
      run: |
        cd Code/api
        npm run build
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: Code/api/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Docker 构建测试
  docker-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Code/client
        file: ./Code/client/Dockerfile
        push: false
        tags: wecv-ai-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Code/api
        file: ./Code/api/Dockerfile
        push: false
        tags: wecv-ai-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到测试环境 (可选)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, docker-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "部署到测试环境..."
        # 这里可以添加实际的部署脚本
        # 例如：docker-compose up -d

  # 部署到生产环境 (可选)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, docker-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "部署到生产环境..."
        # 这里可以添加实际的部署脚本
